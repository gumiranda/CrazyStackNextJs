---
description: UI component and styling guidelines using Shadcn UI, Radix UI, and Tailwind
globs: 
alwaysApply: false
---
# UI Components and Styling

## UI Framework
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS using a mobile-first approach
- Use `next/image` package for images

## Install new Shadcn components

```sh
bunx --bun shadcn@latest add COMPONENT
```

Example:

```sh
bunx --bun shadcn@latest add progress
```

## Atomic Design

Nossa estrutura de componentes segue os princípios do Atomic Design, uma metodologia que divide os componentes em cinco níveis distintos:

### Átomos (atoms)
- Componentes mais básicos e indivisíveis
- Exemplos: botões, inputs, labels, ícones
- Localização: `components/ui/`

### Moléculas (molecules)
- Combinação de átomos para formar componentes simples mas funcionais
- Exemplos: campos de busca, cards simples, formulários básicos
- Localização: `components/molecules/`

### Organismos (organisms)
- Componentes mais complexos formados por moléculas e/ou átomos
- Exemplos: headers, footers, listas de cards
- Localização: `components/organisms/`

### Templates
- Estruturas de página sem conteúdo real
- Define o layout e a organização dos organismos
- Localização: `components/templates/`

### Páginas (pages)
- Instâncias específicas de templates com conteúdo real
- Implementadas dentro do diretório `app/`

### Exemplo de Estrutura
```
components/
├── ui/              # Átomos
│   ├── button.tsx
│   ├── input.tsx
│   └── label.tsx
├── molecules/       # Moléculas
│   ├── search-bar.tsx
│   └── form-field.tsx
├── organisms/       # Organismos
│   ├── header.tsx
│   └── footer.tsx
└── templates/       # Templates
    ├── dashboard.tsx
    └── auth.tsx
```
 


## Data Fetching with @tanstack/react-query
For API get requests to server use the `@tanstack/react-query` package:

```typescript
import { useQuery } from '@tanstack/react-query';

interface PlanHistoryResponse {
  // Defina a estrutura do seu tipo de resposta aqui
  // Exemplo:
  // id: number;
  // name: string;
  // etc.
}

const fetchPlanHistory = async (page: number): Promise<PlanHistoryResponse> => {
  const response = await fetch(`/api/user/planned/history?page=${page}`);
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
};

const MyComponent = () => {
  const page = 1;
  const { data, isLoading, error } = useQuery<PlanHistoryResponse, Error>(
    ['planHistory', page],
    () => fetchPlanHistory(page)
  );

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;

  return (
    <div>
      {/* Renderize seus dados aqui */} 
    </div>
  );
};

export default MyComponent;
```

## Loading Components
Use the `LoadingContent` component to handle loading states:

```tsx
<Card>
  <LoadingContent loading={isLoading} error={error}>
    {data && <MyComponent data={data} />}
  </LoadingContent>
</Card>
```

## Form Components
### Text Inputs
```tsx
<Input
  type="email"
  name="email"
  label="Email"
  registerProps={register("email", { required: true })}
  error={errors.email}
/>
```

### Text Area
```tsx
<Input
  type="text"
  autosizeTextarea
  rows={3}
  name="message"
  placeholder="Paste in email content"
  registerProps={register("message", { required: true })}
  error={errors.message}
/>
``` 